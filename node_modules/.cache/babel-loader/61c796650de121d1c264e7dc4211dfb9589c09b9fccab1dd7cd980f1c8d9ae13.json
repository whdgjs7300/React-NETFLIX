{"ast":null,"code":"import api from \"../api\";\nimport { movieActions } from '../reducer/movieReducer';\nconst API_KEY = process.env.REACT_APP_API_KEY;\nfunction getMovies(activePage) {\n  // 미들웨어는 함수안에 함수를 return함\n  // axios는 프론트, 백에서 둘다 쓰임(node.js에서 fetch가 쓰이지 않음)\n  // API키 보호를 위해 .env 파일을 만들어 보관(중요한 정보 보호)\n  // 환경설정을 위해 .gitignore 파일에 .env 파일을 생략시킴\n  // api를 동시에 처리하고 싶을 때  promise\n  return async dispatch => {\n    // 로딩스피너 \n    try {\n      dispatch({\n        type: \"GET_MOVIES_REQUEST\"\n      });\n      // 첫번째 api 설정\n      const popularMovieApi = api.get(`/movie/popular?api_key=${API_KEY}&language=en-US&page=1`);\n      // 두번째 api 설정\n      const topRateApi = api.get(`/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`);\n      // 세번째 api 설정\n      const upComingApi = api.get(`/movie/upcoming?api_key=${API_KEY}&language=en-US&page=1`);\n      // 장르별 api 설정\n      const genreApi = api.get(`/genre/movie/list?api_key=${API_KEY}&language=en-US`);\n\n      //  let url3 = \"/movie/upcoming?api_key=<<api_key>>&language=en-US&page=1\"\n      // 매개변수로 배열을 받음    \n      // 여러가지의 api를 한번에 호출\n      // await를 위에 호출할 때 쓰지않고 promise.all함수를 통해 한번에 통일시킴\n\n      let [popularMovies, topRatedMovies, upComingMovies, genreList] = await Promise.all([popularMovieApi, topRateApi, upComingApi, genreApi]);\n      dispatch({\n        type: \"GET_MOVIES_SUCCESS\",\n        payload: {\n          popularMovies: popularMovies.data,\n          topRatedMovies: topRatedMovies.data,\n          upComingMovies: upComingMovies.data,\n          genreList: genreList.data.genres\n        }\n      });\n    } catch (error) {\n      // 에러핸들링하는곳\n      dispatch({\n        type: \"GET_MOVIES_FAILURE\"\n      });\n    }\n  };\n}\nfunction getDetail(id) {\n  return async dispatch => {\n    // id별 api 설정\n    const detailApi = api.get(`/movie/${id}?api_key=${API_KEY}&language=en-US`);\n    //  Review별 api 설정\n    const reviewApi = api.get(`/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    //  추천영화 api\n    const recommendApi = api.get(`/movie/${id}/recommendations?api_key=${API_KEY}&language=en-US&page=1`);\n    //  예고편 api\n    const videoApi = api.get(`/movie/${id}/videos?api_key=${API_KEY}&language=en-US`);\n    let [detailList, reviewList, recommendList, videoList] = await Promise.all([detailApi, reviewApi, recommendApi, videoApi]);\n    dispatch({\n      type: \"GET_DETAIL_MOVIES\",\n      payload: {\n        detailList: detailList.data,\n        reviewList: reviewList.data,\n        recommendList: recommendList.data,\n        videoList: videoList.data\n      }\n    });\n  };\n}\nfunction getFilter(activePage, genreId) {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: \"GET_FILTER_MOVIE_REQUEST\"\n      });\n      // 페이지별 api\n      const pageApi = api.get(`/movie/popular?api_key=${API_KEY}&language=en-US&page=${activePage}`);\n      const getGenresApi = api.get(`/genre/movie/list?api_key=${API_KEY}&language=en-US`);\n      let [getGenre, pageList] = await Promise.all([getGenresApi, pageApi]);\n      dispatch({\n        type: \"GET_FILTER_MOVIE_SUCCESS\"\n      });\n      dispatch({\n        type: \"GET_GENRE\",\n        payload: {\n          getGenre: getGenre.data.genres\n        }\n      });\n      dispatch({\n        type: \"GET_PAGE_MOVIES\",\n        payload: {\n          pageList: pageList.data\n        }\n      });\n    } catch {\n      dispatch({\n        type: \"GET_FILTER_MOVIE_FAILURE\"\n      });\n    }\n  };\n}\nexport const movieAction = {\n  getMovies,\n  getDetail,\n  getFilter\n};","map":{"version":3,"names":["api","movieActions","API_KEY","process","env","REACT_APP_API_KEY","getMovies","activePage","dispatch","type","popularMovieApi","get","topRateApi","upComingApi","genreApi","popularMovies","topRatedMovies","upComingMovies","genreList","Promise","all","payload","data","genres","error","getDetail","id","detailApi","reviewApi","recommendApi","videoApi","detailList","reviewList","recommendList","videoList","getFilter","genreId","pageApi","getGenresApi","getGenre","pageList","movieAction"],"sources":["/Users/whdgjs7300/Documents/박종헌/개인프로젝트/React-NETFLIX/netflix/src/redux/actions/movieAction.js"],"sourcesContent":["import api from \"../api\";\nimport {movieActions} from '../reducer/movieReducer'\n\n\nconst API_KEY=process.env.REACT_APP_API_KEY\n\nfunction getMovies(activePage) {\n    // 미들웨어는 함수안에 함수를 return함\n    // axios는 프론트, 백에서 둘다 쓰임(node.js에서 fetch가 쓰이지 않음)\n    // API키 보호를 위해 .env 파일을 만들어 보관(중요한 정보 보호)\n    // 환경설정을 위해 .gitignore 파일에 .env 파일을 생략시킴\n    // api를 동시에 처리하고 싶을 때  promise\n    return async(dispatch)=>{\n        // 로딩스피너 \n        try{\n            dispatch({type:\"GET_MOVIES_REQUEST\"})\n        // 첫번째 api 설정\n        const popularMovieApi = api.get(`/movie/popular?api_key=${API_KEY}&language=en-US&page=1`);\n        // 두번째 api 설정\n        const topRateApi = api.get(`/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`)\n        // 세번째 api 설정\n        const upComingApi = api.get(`/movie/upcoming?api_key=${API_KEY}&language=en-US&page=1`)\n        // 장르별 api 설정\n        const genreApi = api.get(`/genre/movie/list?api_key=${API_KEY}&language=en-US`)\n        \n        \n    //  let url3 = \"/movie/upcoming?api_key=<<api_key>>&language=en-US&page=1\"\n    // 매개변수로 배열을 받음    \n    // 여러가지의 api를 한번에 호출\n    // await를 위에 호출할 때 쓰지않고 promise.all함수를 통해 한번에 통일시킴\n    \n    let [popularMovies, topRatedMovies, upComingMovies, genreList,] = \n    await Promise.all([popularMovieApi, topRateApi, upComingApi, genreApi, ])\n    \n        dispatch({\n            type : \"GET_MOVIES_SUCCESS\",\n            payload : \n            {\n            popularMovies : popularMovies.data,\n            topRatedMovies : topRatedMovies.data,\n            upComingMovies : upComingMovies.data,\n            genreList : genreList.data.genres,\n            }\n        })\n        }catch(error){\n            // 에러핸들링하는곳\n            dispatch({type: \"GET_MOVIES_FAILURE\"})\n        }\n        \n    }\n    \n}\n\n\nfunction getDetail(id) {\n    return async(dispatch)=> {\n // id별 api 설정\n    const detailApi = api.get(`/movie/${id}?api_key=${API_KEY}&language=en-US`);\n//  Review별 api 설정\n    const reviewApi = api.get(`/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n//  추천영화 api\n    const recommendApi = api.get(`/movie/${id}/recommendations?api_key=${API_KEY}&language=en-US&page=1`)\n//  예고편 api\n    const videoApi = api.get(`/movie/${id}/videos?api_key=${API_KEY}&language=en-US`)\n    let [detailList,reviewList, recommendList, videoList] =\n    await Promise.all([detailApi, reviewApi, recommendApi, videoApi])\n    \n    dispatch({type : \"GET_DETAIL_MOVIES\", payload:\n    {\n    detailList : detailList.data, \n    reviewList : reviewList.data,\n    recommendList : recommendList.data,\n    videoList : videoList.data,\n    }})\n\n    }\n\n}\n\n\nfunction getFilter(activePage,genreId) {\n    return async(dispatch) => {\n        try {\n            dispatch({type: \"GET_FILTER_MOVIE_REQUEST\"})\n            // 페이지별 api\n            const pageApi = api.get(`/movie/popular?api_key=${API_KEY}&language=en-US&page=${activePage}`)\n\n            const getGenresApi = api.get(`/genre/movie/list?api_key=${API_KEY}&language=en-US`)\n\n            let [getGenre,pageList] = await Promise.all(\n                [getGenresApi,pageApi])\n                \n            dispatch({type : \"GET_FILTER_MOVIE_SUCCESS\"})\n    \n            dispatch({type : \"GET_GENRE\", payload : {\n                getGenre : getGenre.data.genres,\n            }})\n            dispatch({type : \"GET_PAGE_MOVIES\", payload : {\n                pageList : pageList.data,\n            }})\n\n        }catch {\n            dispatch({type : \"GET_FILTER_MOVIE_FAILURE\"})\n        }\n        \n    }\n}\n\n\nexport const movieAction = {\n    getMovies, getDetail, getFilter,\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}